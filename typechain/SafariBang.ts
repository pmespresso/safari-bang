/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export declare namespace SafariBangStorage {
  export type PositionStruct = {
    animalId: PromiseOrValue<BigNumberish>;
    row: PromiseOrValue<BigNumberish>;
    col: PromiseOrValue<BigNumberish>;
  };

  export type PositionStructOutput = [BigNumber, number, number] & {
    animalId: BigNumber;
    row: number;
    col: number;
  };

  export type AnimalStruct = {
    animalType: PromiseOrValue<BigNumberish>;
    species: PromiseOrValue<BigNumberish>;
    id: PromiseOrValue<BigNumberish>;
    size: PromiseOrValue<BigNumberish>;
    strength: PromiseOrValue<BigNumberish>;
    speed: PromiseOrValue<BigNumberish>;
    fertility: PromiseOrValue<BigNumberish>;
    anxiety: PromiseOrValue<BigNumberish>;
    aggression: PromiseOrValue<BigNumberish>;
    libido: PromiseOrValue<BigNumberish>;
    gender: PromiseOrValue<boolean>;
    owner: PromiseOrValue<string>;
  };

  export type AnimalStructOutput = [
    number,
    number,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    boolean,
    string
  ] & {
    animalType: number;
    species: number;
    id: BigNumber;
    size: BigNumber;
    strength: BigNumber;
    speed: BigNumber;
    fertility: BigNumber;
    anxiety: BigNumber;
    aggression: BigNumber;
    libido: BigNumber;
    gender: boolean;
    owner: string;
  };
}

export interface SafariBangInterface extends utils.Interface {
  functions: {
    "MINT_PRICE()": FunctionFragment;
    "NUM_COLS()": FunctionFragment;
    "NUM_ROWS()": FunctionFragment;
    "TOTAL_SUPPLY()": FunctionFragment;
    "approve(address,uint256)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "baseURI()": FunctionFragment;
    "createAnimal(address)": FunctionFragment;
    "currentTokenId()": FunctionFragment;
    "fight(uint8)": FunctionFragment;
    "flee()": FunctionFragment;
    "fuck(uint8)": FunctionFragment;
    "getApproved(uint256)": FunctionFragment;
    "getQuiver(address)": FunctionFragment;
    "getWords(uint256)": FunctionFragment;
    "godModeAttributes(uint256,uint256,uint256,bool)": FunctionFragment;
    "godModePlacement(address,uint256,uint8,uint8)": FunctionFragment;
    "idToAnimal(uint256)": FunctionFragment;
    "idToPosition(uint256)": FunctionFragment;
    "isApprovedForAll(address,address)": FunctionFragment;
    "mapGenesis(uint256)": FunctionFragment;
    "mintTo(address)": FunctionFragment;
    "move(uint8,uint8)": FunctionFragment;
    "movesRemaining(address)": FunctionFragment;
    "name()": FunctionFragment;
    "omfgAnAsteroidOhNo()": FunctionFragment;
    "onERC721Received(address,address,uint256,bytes)": FunctionFragment;
    "ownerOf(uint256)": FunctionFragment;
    "owners()": FunctionFragment;
    "playerToPosition(address)": FunctionFragment;
    "quiver(address,uint256)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "roundCounter()": FunctionFragment;
    "safariMap(uint256,uint256)": FunctionFragment;
    "safeTransferFrom(address,address,uint256)": FunctionFragment;
    "safeTransferFrom(address,address,uint256,bytes)": FunctionFragment;
    "setApprovalForAll(address,bool)": FunctionFragment;
    "species(uint256)": FunctionFragment;
    "superOwner()": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "symbol()": FunctionFragment;
    "tokenURI(uint256)": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "transferSuperOwnership(address)": FunctionFragment;
    "vrfConsumer()": FunctionFragment;
    "vrfCoordinator()": FunctionFragment;
    "withdrawPayments(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "MINT_PRICE"
      | "NUM_COLS"
      | "NUM_ROWS"
      | "TOTAL_SUPPLY"
      | "approve"
      | "balanceOf"
      | "baseURI"
      | "createAnimal"
      | "currentTokenId"
      | "fight"
      | "flee"
      | "fuck"
      | "getApproved"
      | "getQuiver"
      | "getWords"
      | "godModeAttributes"
      | "godModePlacement"
      | "idToAnimal"
      | "idToPosition"
      | "isApprovedForAll"
      | "mapGenesis"
      | "mintTo"
      | "move"
      | "movesRemaining"
      | "name"
      | "omfgAnAsteroidOhNo"
      | "onERC721Received"
      | "ownerOf"
      | "owners"
      | "playerToPosition"
      | "quiver"
      | "renounceOwnership"
      | "roundCounter"
      | "safariMap"
      | "safeTransferFrom(address,address,uint256)"
      | "safeTransferFrom(address,address,uint256,bytes)"
      | "setApprovalForAll"
      | "species"
      | "superOwner"
      | "supportsInterface"
      | "symbol"
      | "tokenURI"
      | "transferFrom"
      | "transferOwnership"
      | "transferSuperOwnership"
      | "vrfConsumer"
      | "vrfCoordinator"
      | "withdrawPayments"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "MINT_PRICE",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "NUM_COLS", values?: undefined): string;
  encodeFunctionData(functionFragment: "NUM_ROWS", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "TOTAL_SUPPLY",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "baseURI", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "createAnimal",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "currentTokenId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "fight",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "flee", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "fuck",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getApproved",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getQuiver",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getWords",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "godModeAttributes",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "godModePlacement",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "idToAnimal",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "idToPosition",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "isApprovedForAll",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "mapGenesis",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "mintTo",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "move",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "movesRemaining",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "omfgAnAsteroidOhNo",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "onERC721Received",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "ownerOf",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "owners", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "playerToPosition",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "quiver",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "roundCounter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "safariMap",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom(address,address,uint256)",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom(address,address,uint256,bytes)",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setApprovalForAll",
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "species",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "superOwner",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "tokenURI",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferSuperOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "vrfConsumer",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "vrfCoordinator",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawPayments",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(functionFragment: "MINT_PRICE", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "NUM_COLS", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "NUM_ROWS", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "TOTAL_SUPPLY",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "baseURI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createAnimal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentTokenId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "fight", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "flee", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "fuck", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getApproved",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getQuiver", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getWords", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "godModeAttributes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "godModePlacement",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "idToAnimal", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "idToPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isApprovedForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mapGenesis", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "mintTo", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "move", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "movesRemaining",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "omfgAnAsteroidOhNo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onERC721Received",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "ownerOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owners", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "playerToPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "quiver", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "roundCounter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "safariMap", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom(address,address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom(address,address,uint256,bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setApprovalForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "species", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "superOwner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tokenURI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferSuperOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "vrfConsumer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "vrfCoordinator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawPayments",
    data: BytesLike
  ): Result;

  events: {
    "AnimalBurnedAndRemovedFromCell(uint256,uint8,uint8)": EventFragment;
    "AnimalReplacedFromQuiver(uint256,uint8,uint8)": EventFragment;
    "Approval(address,address,uint256)": EventFragment;
    "ApprovalForAll(address,address,bool)": EventFragment;
    "AsteroidDeathCount(uint256,uint256,uint256)": EventFragment;
    "CreateAnimal(uint256)": EventFragment;
    "FightAttempt(address,address)": EventFragment;
    "FightSuccess(address,address)": EventFragment;
    "FuckAttempt(address,address)": EventFragment;
    "FuckSuccess(address,address)": EventFragment;
    "Log(string)": EventFragment;
    "MapGenesis()": EventFragment;
    "MoveToEmptySquare(address,uint8,uint8)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "SuperOwnershipTransferred(address,address)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
    "VRFGetWordsSuccess()": EventFragment;
  };

  getEvent(
    nameOrSignatureOrTopic: "AnimalBurnedAndRemovedFromCell"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AnimalReplacedFromQuiver"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ApprovalForAll"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AsteroidDeathCount"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CreateAnimal"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FightAttempt"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FightSuccess"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FuckAttempt"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FuckSuccess"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Log"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MapGenesis"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MoveToEmptySquare"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SuperOwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "VRFGetWordsSuccess"): EventFragment;
}

export interface AnimalBurnedAndRemovedFromCellEventObject {
  id: BigNumber;
  row: number;
  col: number;
}
export type AnimalBurnedAndRemovedFromCellEvent = TypedEvent<
  [BigNumber, number, number],
  AnimalBurnedAndRemovedFromCellEventObject
>;

export type AnimalBurnedAndRemovedFromCellEventFilter =
  TypedEventFilter<AnimalBurnedAndRemovedFromCellEvent>;

export interface AnimalReplacedFromQuiverEventObject {
  id: BigNumber;
  row: number;
  col: number;
}
export type AnimalReplacedFromQuiverEvent = TypedEvent<
  [BigNumber, number, number],
  AnimalReplacedFromQuiverEventObject
>;

export type AnimalReplacedFromQuiverEventFilter =
  TypedEventFilter<AnimalReplacedFromQuiverEvent>;

export interface ApprovalEventObject {
  owner: string;
  spender: string;
  id: BigNumber;
}
export type ApprovalEvent = TypedEvent<
  [string, string, BigNumber],
  ApprovalEventObject
>;

export type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>;

export interface ApprovalForAllEventObject {
  owner: string;
  operator: string;
  approved: boolean;
}
export type ApprovalForAllEvent = TypedEvent<
  [string, string, boolean],
  ApprovalForAllEventObject
>;

export type ApprovalForAllEventFilter = TypedEventFilter<ApprovalForAllEvent>;

export interface AsteroidDeathCountEventObject {
  survivors: BigNumber;
  dead: BigNumber;
  timestamp: BigNumber;
}
export type AsteroidDeathCountEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber],
  AsteroidDeathCountEventObject
>;

export type AsteroidDeathCountEventFilter =
  TypedEventFilter<AsteroidDeathCountEvent>;

export interface CreateAnimalEventObject {
  id: BigNumber;
}
export type CreateAnimalEvent = TypedEvent<
  [BigNumber],
  CreateAnimalEventObject
>;

export type CreateAnimalEventFilter = TypedEventFilter<CreateAnimalEvent>;

export interface FightAttemptEventObject {
  fighter: string;
  fightee: string;
}
export type FightAttemptEvent = TypedEvent<
  [string, string],
  FightAttemptEventObject
>;

export type FightAttemptEventFilter = TypedEventFilter<FightAttemptEvent>;

export interface FightSuccessEventObject {
  victor: string;
  loser: string;
}
export type FightSuccessEvent = TypedEvent<
  [string, string],
  FightSuccessEventObject
>;

export type FightSuccessEventFilter = TypedEventFilter<FightSuccessEvent>;

export interface FuckAttemptEventObject {
  fucker: string;
  fuckee: string;
}
export type FuckAttemptEvent = TypedEvent<
  [string, string],
  FuckAttemptEventObject
>;

export type FuckAttemptEventFilter = TypedEventFilter<FuckAttemptEvent>;

export interface FuckSuccessEventObject {
  fucker: string;
  newlyMinted: string;
}
export type FuckSuccessEvent = TypedEvent<
  [string, string],
  FuckSuccessEventObject
>;

export type FuckSuccessEventFilter = TypedEventFilter<FuckSuccessEvent>;

export interface LogEventObject {
  message: string;
}
export type LogEvent = TypedEvent<[string], LogEventObject>;

export type LogEventFilter = TypedEventFilter<LogEvent>;

export interface MapGenesisEventObject {}
export type MapGenesisEvent = TypedEvent<[], MapGenesisEventObject>;

export type MapGenesisEventFilter = TypedEventFilter<MapGenesisEvent>;

export interface MoveToEmptySquareEventObject {
  whoMoved: string;
  newRow: number;
  newCol: number;
}
export type MoveToEmptySquareEvent = TypedEvent<
  [string, number, number],
  MoveToEmptySquareEventObject
>;

export type MoveToEmptySquareEventFilter =
  TypedEventFilter<MoveToEmptySquareEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface SuperOwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type SuperOwnershipTransferredEvent = TypedEvent<
  [string, string],
  SuperOwnershipTransferredEventObject
>;

export type SuperOwnershipTransferredEventFilter =
  TypedEventFilter<SuperOwnershipTransferredEvent>;

export interface TransferEventObject {
  from: string;
  to: string;
  id: BigNumber;
}
export type TransferEvent = TypedEvent<
  [string, string, BigNumber],
  TransferEventObject
>;

export type TransferEventFilter = TypedEventFilter<TransferEvent>;

export interface VRFGetWordsSuccessEventObject {}
export type VRFGetWordsSuccessEvent = TypedEvent<
  [],
  VRFGetWordsSuccessEventObject
>;

export type VRFGetWordsSuccessEventFilter =
  TypedEventFilter<VRFGetWordsSuccessEvent>;

export interface SafariBang extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: SafariBangInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    MINT_PRICE(overrides?: CallOverrides): Promise<[BigNumber]>;

    NUM_COLS(overrides?: CallOverrides): Promise<[number]>;

    NUM_ROWS(overrides?: CallOverrides): Promise<[number]>;

    TOTAL_SUPPLY(overrides?: CallOverrides): Promise<[BigNumber]>;

    approve(
      spender: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    balanceOf(
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    baseURI(overrides?: CallOverrides): Promise<[string]>;

    createAnimal(
      to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    currentTokenId(overrides?: CallOverrides): Promise<[BigNumber]>;

    fight(
      direction: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    flee(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    fuck(
      direction: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getApproved(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getQuiver(
      who: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [SafariBangStorage.AnimalStructOutput[]] & {
        myQuiver: SafariBangStorage.AnimalStructOutput[];
      }
    >;

    getWords(
      requestId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    godModeAttributes(
      id: PromiseOrValue<BigNumberish>,
      fertility: PromiseOrValue<BigNumberish>,
      libido: PromiseOrValue<BigNumberish>,
      gender: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    godModePlacement(
      who: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      row: PromiseOrValue<BigNumberish>,
      col: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    idToAnimal(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        number,
        number,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean,
        string
      ] & {
        animalType: number;
        species: number;
        id: BigNumber;
        size: BigNumber;
        strength: BigNumber;
        speed: BigNumber;
        fertility: BigNumber;
        anxiety: BigNumber;
        aggression: BigNumber;
        libido: BigNumber;
        gender: boolean;
        owner: string;
      }
    >;

    idToPosition(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, number, number] & {
        animalId: BigNumber;
        row: number;
        col: number;
      }
    >;

    isApprovedForAll(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    mapGenesis(
      howMany: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    mintTo(
      to: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    move(
      direction: PromiseOrValue<BigNumberish>,
      howManySquares: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    movesRemaining(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[number]>;

    name(overrides?: CallOverrides): Promise<[string]>;

    omfgAnAsteroidOhNo(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    onERC721Received(
      operator: PromiseOrValue<string>,
      from: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    ownerOf(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string] & { owner: string }>;

    owners(overrides?: CallOverrides): Promise<[[string, string]]>;

    playerToPosition(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, number, number] & {
        animalId: BigNumber;
        row: number;
        col: number;
      }
    >;

    quiver(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        number,
        number,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean,
        string
      ] & {
        animalType: number;
        species: number;
        id: BigNumber;
        size: BigNumber;
        strength: BigNumber;
        speed: BigNumber;
        fertility: BigNumber;
        anxiety: BigNumber;
        aggression: BigNumber;
        libido: BigNumber;
        gender: boolean;
        owner: string;
      }
    >;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    roundCounter(overrides?: CallOverrides): Promise<[number]>;

    safariMap(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "safeTransferFrom(address,address,uint256)"(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setApprovalForAll(
      operator: PromiseOrValue<string>,
      approved: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    species(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[number]>;

    superOwner(overrides?: CallOverrides): Promise<[string]>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    tokenURI(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    transferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferSuperOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    vrfConsumer(overrides?: CallOverrides): Promise<[string]>;

    vrfCoordinator(overrides?: CallOverrides): Promise<[string]>;

    withdrawPayments(
      payee: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  MINT_PRICE(overrides?: CallOverrides): Promise<BigNumber>;

  NUM_COLS(overrides?: CallOverrides): Promise<number>;

  NUM_ROWS(overrides?: CallOverrides): Promise<number>;

  TOTAL_SUPPLY(overrides?: CallOverrides): Promise<BigNumber>;

  approve(
    spender: PromiseOrValue<string>,
    id: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  balanceOf(
    owner: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  baseURI(overrides?: CallOverrides): Promise<string>;

  createAnimal(
    to: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  currentTokenId(overrides?: CallOverrides): Promise<BigNumber>;

  fight(
    direction: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  flee(
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  fuck(
    direction: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getApproved(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  getQuiver(
    who: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<SafariBangStorage.AnimalStructOutput[]>;

  getWords(
    requestId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  godModeAttributes(
    id: PromiseOrValue<BigNumberish>,
    fertility: PromiseOrValue<BigNumberish>,
    libido: PromiseOrValue<BigNumberish>,
    gender: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  godModePlacement(
    who: PromiseOrValue<string>,
    id: PromiseOrValue<BigNumberish>,
    row: PromiseOrValue<BigNumberish>,
    col: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  idToAnimal(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [
      number,
      number,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      boolean,
      string
    ] & {
      animalType: number;
      species: number;
      id: BigNumber;
      size: BigNumber;
      strength: BigNumber;
      speed: BigNumber;
      fertility: BigNumber;
      anxiety: BigNumber;
      aggression: BigNumber;
      libido: BigNumber;
      gender: boolean;
      owner: string;
    }
  >;

  idToPosition(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, number, number] & {
      animalId: BigNumber;
      row: number;
      col: number;
    }
  >;

  isApprovedForAll(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  mapGenesis(
    howMany: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  mintTo(
    to: PromiseOrValue<string>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  move(
    direction: PromiseOrValue<BigNumberish>,
    howManySquares: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  movesRemaining(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<number>;

  name(overrides?: CallOverrides): Promise<string>;

  omfgAnAsteroidOhNo(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  onERC721Received(
    operator: PromiseOrValue<string>,
    from: PromiseOrValue<string>,
    tokenId: PromiseOrValue<BigNumberish>,
    data: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  ownerOf(
    id: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  owners(overrides?: CallOverrides): Promise<[string, string]>;

  playerToPosition(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, number, number] & {
      animalId: BigNumber;
      row: number;
      col: number;
    }
  >;

  quiver(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [
      number,
      number,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      boolean,
      string
    ] & {
      animalType: number;
      species: number;
      id: BigNumber;
      size: BigNumber;
      strength: BigNumber;
      speed: BigNumber;
      fertility: BigNumber;
      anxiety: BigNumber;
      aggression: BigNumber;
      libido: BigNumber;
      gender: boolean;
      owner: string;
    }
  >;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  roundCounter(overrides?: CallOverrides): Promise<number>;

  safariMap(
    arg0: PromiseOrValue<BigNumberish>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "safeTransferFrom(address,address,uint256)"(
    from: PromiseOrValue<string>,
    to: PromiseOrValue<string>,
    id: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "safeTransferFrom(address,address,uint256,bytes)"(
    from: PromiseOrValue<string>,
    to: PromiseOrValue<string>,
    id: PromiseOrValue<BigNumberish>,
    data: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setApprovalForAll(
    operator: PromiseOrValue<string>,
    approved: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  species(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<number>;

  superOwner(overrides?: CallOverrides): Promise<string>;

  supportsInterface(
    interfaceId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  symbol(overrides?: CallOverrides): Promise<string>;

  tokenURI(
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  transferFrom(
    from: PromiseOrValue<string>,
    to: PromiseOrValue<string>,
    id: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferSuperOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  vrfConsumer(overrides?: CallOverrides): Promise<string>;

  vrfCoordinator(overrides?: CallOverrides): Promise<string>;

  withdrawPayments(
    payee: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    MINT_PRICE(overrides?: CallOverrides): Promise<BigNumber>;

    NUM_COLS(overrides?: CallOverrides): Promise<number>;

    NUM_ROWS(overrides?: CallOverrides): Promise<number>;

    TOTAL_SUPPLY(overrides?: CallOverrides): Promise<BigNumber>;

    approve(
      spender: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    balanceOf(
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    baseURI(overrides?: CallOverrides): Promise<string>;

    createAnimal(
      to: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    currentTokenId(overrides?: CallOverrides): Promise<BigNumber>;

    fight(
      direction: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<SafariBangStorage.PositionStructOutput>;

    flee(
      overrides?: CallOverrides
    ): Promise<SafariBangStorage.PositionStructOutput>;

    fuck(
      direction: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<SafariBangStorage.PositionStructOutput>;

    getApproved(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    getQuiver(
      who: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<SafariBangStorage.AnimalStructOutput[]>;

    getWords(
      requestId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    godModeAttributes(
      id: PromiseOrValue<BigNumberish>,
      fertility: PromiseOrValue<BigNumberish>,
      libido: PromiseOrValue<BigNumberish>,
      gender: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    godModePlacement(
      who: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      row: PromiseOrValue<BigNumberish>,
      col: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    idToAnimal(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        number,
        number,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean,
        string
      ] & {
        animalType: number;
        species: number;
        id: BigNumber;
        size: BigNumber;
        strength: BigNumber;
        speed: BigNumber;
        fertility: BigNumber;
        anxiety: BigNumber;
        aggression: BigNumber;
        libido: BigNumber;
        gender: boolean;
        owner: string;
      }
    >;

    idToPosition(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, number, number] & {
        animalId: BigNumber;
        row: number;
        col: number;
      }
    >;

    isApprovedForAll(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    mapGenesis(
      howMany: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    mintTo(
      to: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    move(
      direction: PromiseOrValue<BigNumberish>,
      howManySquares: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<SafariBangStorage.PositionStructOutput>;

    movesRemaining(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<number>;

    name(overrides?: CallOverrides): Promise<string>;

    omfgAnAsteroidOhNo(overrides?: CallOverrides): Promise<boolean>;

    onERC721Received(
      operator: PromiseOrValue<string>,
      from: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    ownerOf(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    owners(overrides?: CallOverrides): Promise<[string, string]>;

    playerToPosition(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, number, number] & {
        animalId: BigNumber;
        row: number;
        col: number;
      }
    >;

    quiver(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        number,
        number,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean,
        string
      ] & {
        animalType: number;
        species: number;
        id: BigNumber;
        size: BigNumber;
        strength: BigNumber;
        speed: BigNumber;
        fertility: BigNumber;
        anxiety: BigNumber;
        aggression: BigNumber;
        libido: BigNumber;
        gender: boolean;
        owner: string;
      }
    >;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    roundCounter(overrides?: CallOverrides): Promise<number>;

    safariMap(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "safeTransferFrom(address,address,uint256)"(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    setApprovalForAll(
      operator: PromiseOrValue<string>,
      approved: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    species(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<number>;

    superOwner(overrides?: CallOverrides): Promise<string>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    symbol(overrides?: CallOverrides): Promise<string>;

    tokenURI(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    transferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    transferSuperOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    vrfConsumer(overrides?: CallOverrides): Promise<string>;

    vrfCoordinator(overrides?: CallOverrides): Promise<string>;

    withdrawPayments(
      payee: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "AnimalBurnedAndRemovedFromCell(uint256,uint8,uint8)"(
      id?: PromiseOrValue<BigNumberish> | null,
      row?: PromiseOrValue<BigNumberish> | null,
      col?: PromiseOrValue<BigNumberish> | null
    ): AnimalBurnedAndRemovedFromCellEventFilter;
    AnimalBurnedAndRemovedFromCell(
      id?: PromiseOrValue<BigNumberish> | null,
      row?: PromiseOrValue<BigNumberish> | null,
      col?: PromiseOrValue<BigNumberish> | null
    ): AnimalBurnedAndRemovedFromCellEventFilter;

    "AnimalReplacedFromQuiver(uint256,uint8,uint8)"(
      id?: PromiseOrValue<BigNumberish> | null,
      row?: PromiseOrValue<BigNumberish> | null,
      col?: PromiseOrValue<BigNumberish> | null
    ): AnimalReplacedFromQuiverEventFilter;
    AnimalReplacedFromQuiver(
      id?: PromiseOrValue<BigNumberish> | null,
      row?: PromiseOrValue<BigNumberish> | null,
      col?: PromiseOrValue<BigNumberish> | null
    ): AnimalReplacedFromQuiverEventFilter;

    "Approval(address,address,uint256)"(
      owner?: PromiseOrValue<string> | null,
      spender?: PromiseOrValue<string> | null,
      id?: PromiseOrValue<BigNumberish> | null
    ): ApprovalEventFilter;
    Approval(
      owner?: PromiseOrValue<string> | null,
      spender?: PromiseOrValue<string> | null,
      id?: PromiseOrValue<BigNumberish> | null
    ): ApprovalEventFilter;

    "ApprovalForAll(address,address,bool)"(
      owner?: PromiseOrValue<string> | null,
      operator?: PromiseOrValue<string> | null,
      approved?: null
    ): ApprovalForAllEventFilter;
    ApprovalForAll(
      owner?: PromiseOrValue<string> | null,
      operator?: PromiseOrValue<string> | null,
      approved?: null
    ): ApprovalForAllEventFilter;

    "AsteroidDeathCount(uint256,uint256,uint256)"(
      survivors?: PromiseOrValue<BigNumberish> | null,
      dead?: PromiseOrValue<BigNumberish> | null,
      timestamp?: PromiseOrValue<BigNumberish> | null
    ): AsteroidDeathCountEventFilter;
    AsteroidDeathCount(
      survivors?: PromiseOrValue<BigNumberish> | null,
      dead?: PromiseOrValue<BigNumberish> | null,
      timestamp?: PromiseOrValue<BigNumberish> | null
    ): AsteroidDeathCountEventFilter;

    "CreateAnimal(uint256)"(id?: null): CreateAnimalEventFilter;
    CreateAnimal(id?: null): CreateAnimalEventFilter;

    "FightAttempt(address,address)"(
      fighter?: null,
      fightee?: null
    ): FightAttemptEventFilter;
    FightAttempt(fighter?: null, fightee?: null): FightAttemptEventFilter;

    "FightSuccess(address,address)"(
      victor?: null,
      loser?: null
    ): FightSuccessEventFilter;
    FightSuccess(victor?: null, loser?: null): FightSuccessEventFilter;

    "FuckAttempt(address,address)"(
      fucker?: null,
      fuckee?: null
    ): FuckAttemptEventFilter;
    FuckAttempt(fucker?: null, fuckee?: null): FuckAttemptEventFilter;

    "FuckSuccess(address,address)"(
      fucker?: null,
      newlyMinted?: null
    ): FuckSuccessEventFilter;
    FuckSuccess(fucker?: null, newlyMinted?: null): FuckSuccessEventFilter;

    "Log(string)"(message?: null): LogEventFilter;
    Log(message?: null): LogEventFilter;

    "MapGenesis()"(): MapGenesisEventFilter;
    MapGenesis(): MapGenesisEventFilter;

    "MoveToEmptySquare(address,uint8,uint8)"(
      whoMoved?: null,
      newRow?: null,
      newCol?: null
    ): MoveToEmptySquareEventFilter;
    MoveToEmptySquare(
      whoMoved?: null,
      newRow?: null,
      newCol?: null
    ): MoveToEmptySquareEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "SuperOwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): SuperOwnershipTransferredEventFilter;
    SuperOwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): SuperOwnershipTransferredEventFilter;

    "Transfer(address,address,uint256)"(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      id?: PromiseOrValue<BigNumberish> | null
    ): TransferEventFilter;
    Transfer(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      id?: PromiseOrValue<BigNumberish> | null
    ): TransferEventFilter;

    "VRFGetWordsSuccess()"(): VRFGetWordsSuccessEventFilter;
    VRFGetWordsSuccess(): VRFGetWordsSuccessEventFilter;
  };

  estimateGas: {
    MINT_PRICE(overrides?: CallOverrides): Promise<BigNumber>;

    NUM_COLS(overrides?: CallOverrides): Promise<BigNumber>;

    NUM_ROWS(overrides?: CallOverrides): Promise<BigNumber>;

    TOTAL_SUPPLY(overrides?: CallOverrides): Promise<BigNumber>;

    approve(
      spender: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    balanceOf(
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    baseURI(overrides?: CallOverrides): Promise<BigNumber>;

    createAnimal(
      to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    currentTokenId(overrides?: CallOverrides): Promise<BigNumber>;

    fight(
      direction: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    flee(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    fuck(
      direction: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getApproved(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getQuiver(
      who: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getWords(
      requestId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    godModeAttributes(
      id: PromiseOrValue<BigNumberish>,
      fertility: PromiseOrValue<BigNumberish>,
      libido: PromiseOrValue<BigNumberish>,
      gender: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    godModePlacement(
      who: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      row: PromiseOrValue<BigNumberish>,
      col: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    idToAnimal(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    idToPosition(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isApprovedForAll(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mapGenesis(
      howMany: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    mintTo(
      to: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    move(
      direction: PromiseOrValue<BigNumberish>,
      howManySquares: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    movesRemaining(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    omfgAnAsteroidOhNo(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    onERC721Received(
      operator: PromiseOrValue<string>,
      from: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    ownerOf(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owners(overrides?: CallOverrides): Promise<BigNumber>;

    playerToPosition(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    quiver(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    roundCounter(overrides?: CallOverrides): Promise<BigNumber>;

    safariMap(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "safeTransferFrom(address,address,uint256)"(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setApprovalForAll(
      operator: PromiseOrValue<string>,
      approved: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    species(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    superOwner(overrides?: CallOverrides): Promise<BigNumber>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    tokenURI(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferSuperOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    vrfConsumer(overrides?: CallOverrides): Promise<BigNumber>;

    vrfCoordinator(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawPayments(
      payee: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    MINT_PRICE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    NUM_COLS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    NUM_ROWS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    TOTAL_SUPPLY(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    approve(
      spender: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    balanceOf(
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    baseURI(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    createAnimal(
      to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    currentTokenId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    fight(
      direction: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    flee(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    fuck(
      direction: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getApproved(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getQuiver(
      who: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getWords(
      requestId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    godModeAttributes(
      id: PromiseOrValue<BigNumberish>,
      fertility: PromiseOrValue<BigNumberish>,
      libido: PromiseOrValue<BigNumberish>,
      gender: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    godModePlacement(
      who: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      row: PromiseOrValue<BigNumberish>,
      col: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    idToAnimal(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    idToPosition(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isApprovedForAll(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    mapGenesis(
      howMany: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    mintTo(
      to: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    move(
      direction: PromiseOrValue<BigNumberish>,
      howManySquares: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    movesRemaining(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    omfgAnAsteroidOhNo(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    onERC721Received(
      operator: PromiseOrValue<string>,
      from: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    ownerOf(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owners(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    playerToPosition(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    quiver(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    roundCounter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    safariMap(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "safeTransferFrom(address,address,uint256)"(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setApprovalForAll(
      operator: PromiseOrValue<string>,
      approved: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    species(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    superOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokenURI(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferSuperOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    vrfConsumer(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    vrfCoordinator(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdrawPayments(
      payee: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
